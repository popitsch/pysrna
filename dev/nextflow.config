manifest {
    name = "pysrna"
    author = "Niko Popitsch"
    version = "0.1"
    description = "smallRNA analysis pipeline"
}

timeline {
  enabled = true
  file = "logs/execution_timeline.html"
}

profiles {
  //LOCAL
  standard {
    process {
	module = "python/3.7.4-gcccore-8.3.0:fastqc/0.11.8-java-1.8:fastp/0.20.1-gcc-8.2.0-2.31.1:bedtools/2.27.1-foss-2018b:htslib/1.9-foss-2018b:samtools/1.10-foss-2018b:r/4.0.2-foss-2018b"
    	executor = 'local'
    	memory = '8 GB'
    	cpus = 1
	}
  }
  local_big {
    process {
        module = "python/3.7.4-gcccore-8.3.0:fastqc/0.11.8-java-1.8:fastp/0.20.1-gcc-8.2.0-2.31.1:bedtools/2.27.1-foss-2018b:htslib/1.9-foss-2018b:samtools/1.10-foss-2018b:r/4.0.2-foss-2018b"
        executor = 'local'
        memory = '62 GB'
        cpus = 8
        }
  }
  //SLURM (cbe)
  cbe {
    process {
      module = "python/3.7.4-gcccore-8.3.0:fastqc/0.11.8-java-1.8:fastp/0.20.1-gcc-8.2.0-2.31.1:bedtools/2.27.1-foss-2018b:htslib/1.9-foss-2018b:samtools/1.10-foss-2018b:r/4.0.2-foss-2018b"
      executor = 'slurm'
      queue='c'
      memory='64 GB'
      cpus='1'
      time='2.h'
      scratch = false
      withLabel: 'medium' {
        clusterOptions = '--qos=medium'
        memory='128 GB'
        cpus=16
        time='2.d'
      	queue='c'
      }
      withLabel: 'highmem' {
        clusterOptions = '--qos=short'
        memory='200 GB'
        cpus=16
        time='8.h'
      	queue='m'
      }
      withLabel: 'long' {
        clusterOptions = '--qos=long'
        memory='200 GB'
        cpus=16
        time='4.d'
        queue='m'
      }
     beforeScript = 'hostname; module purge; ml list; export DISPLAY=""; export R_LIBS_USER=""; export R_LIBS=""; export PYTHONPATH=""; export PERL5LIB="";'
    }

   singularity {
     enabled = true
     cacheDir = '/resources/containers'
   }
  }

}


workflow.onComplete = {
  println "Completed at : $workflow.complete"
  println "Status       : ${workflow.success?'OK':'failed'}"
  println "Duration     : ${workflow.duration}"
  println "work dir     : ${workflow.workDir}"
  println "exit status  : ${workflow.exitStatus}"
  println "Error report : ${workflow.errorReport?:'-'}"
  println "Command line : ${workflow.commandLine}"
}
